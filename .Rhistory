?matrix
?solve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
?matrix
nums <- c(2, -3, 4, -7)
nums
mymatrix <- matrix(nums, nrow = 2, ncol = 2)
mymatrix
nums <- c(2, 4, -3, -7)
mymatrix <- matrix(nums, nrow = 2, ncol = 2)
mymatrix
makeCacheMatrix(mymatrix)
cacheSolve(mymatrix)
cacheSolve(makeCacheMatrix(mymatrix))
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
source('C:/Users/Dell/Desktop/CFST/WDir/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Dell/Desktop/CFST/WDir/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Dell/Desktop/CFST/WDir/ProgrammingAssignment2/cachematrix.R')
q()
